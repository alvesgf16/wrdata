[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "wrdata"
version = "1.0.0"
description = "League of Legends: Wild Rift champion data scraper and analyzer"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Gabriel Alves", email = "alvesgf16@users.noreply.github.com"}
]
keywords = ["wild-rift", "data-scraping", "champion-stats", "gaming"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Games/Entertainment",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies (production)
dependencies = [
    "selenium>=4.25.0",
    "webdriver-manager>=4.0.2",
    "numpy>=2.1.2",
    "xlsxwriter>=3.2.2",
    "requests>=2.32.3",
]

# Optional dependencies for development
[project.optional-dependencies]
dev = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-localserver>=0.9.0",
    "mypy>=1.14.1",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
    "pre-commit>=3.0.0",
]
test = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-localserver>=0.9.0",
]
lint = [
    "mypy>=1.14.1",
    "black>=24.0.0",
    "isort>=5.13.0",
    "flake8>=7.0.0",
]

[project.urls]
Homepage = "https://github.com/alvesgf16/wrdata"
Repository = "https://github.com/alvesgf16/wrdata"
Issues = "https://github.com/alvesgf16/wrdata/issues"

[project.scripts]
wrdata = "wrdata.cli.main:main"

# Tell setuptools where to find our packages
[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=src",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-report=term-missing",
    "-v"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
check_untyped_defs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "selenium.*",
    "webdriver_manager.*",
    "xlsxwriter.*",
]
ignore_missing_imports = true

# Black configuration
[tool.black]
line-length = 80
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 80
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["src", "tests"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pyright]
  reportUnknownVariableType = false